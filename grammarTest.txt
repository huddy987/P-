// this is how we comment this file
// so the very first char of every line is N to tell the
//      the grammar maker that it's a Nonterminal being defined
// if the token starts with a capital letter, its a nonterminal
// if it starts with a lower case letter, its a terminal
// these has their own sets in the map with key: "terminal" & "nonTerminal"
// end the query with Q to mean Quit
// The test immediately follows the description of the grammar
// //////////////////////////////////////////////////////////////////////////////////////

// Start Grammar for Assignment
N Start Left Equality | int    | id  | Open Expr_Close   | Term MulOp_Factor     | Expr AddOp_Term   | AddOp Term

N Equality Equal MathArgument | Equal StringArgument

// Assignment grammar: can assign sterings or numbers
N Assignment Identifier Equality_Left | Identifier Equal_GraphKey
N Equality_Left Equal StringArgument | Equal MathArgument

// This one's pretty important
N StringArgument StringArgument StringArgument | string | id | int | StringArgument MathArgument | StringArgument PrintGraphFunc
N Identifier id
N Equal =

// this is for PEMDAS
N MathArgument   int    | id  | Open Expr_Close   | Term MulOp_Factor     | Expr AddOp_Term   | AddOp Term
N Expr     int    | id  | Open Expr_Close     | Term MulOp_Factor     | Expr AddOp_Term   | AddOp Term
N Term     int    | id  | Open Expr_Close     | Term MulOp_Factor
N Factor   int    | id  | Open Expr_Close
N Primary      int    | id  | Open Expr_Close
N AddOp    +     | -
N MulOp    *     | /
N Open     (
N Close    )
N AddOp_Term   AddOp Term
N MulOp_Factor     MulOp Factor
N Expr_Close   Expr Close

// This is For functions
N Delimeter :
N Num int | id

// Printing syntax [print : string/id/string/...]
N Print PFunction Delimeter_SArgument
N PFunction print
N Delimeter_SArgument Delimeter StringArgument | Delimeter PrintGraphFunc | Delimeter GraphFunc
N PrintGraphFunc PrintGraphFunc PrintGraphFunc | GraphFunc StringArgument | StringArgument GraphFunc


// Check graph object
N GraphFunc Identifier GraphMethod_Argument | Identifier GraphVoids

// this is for creating the graph object
N Equal_GraphKey Equal GraphKey
N GraphKey keyword

// void returns. should be their own thing
N GraphVoids AddVert ADVrgument | AddEdge EdgeArgument

// this is graph methods: NumNum can be an arbitrary length of num
N GraphMethod_Argument | GetVertex Num | IsVertex Num | IsEdge Num | size | NumNeighbours Num | IsWalk_or_isPath NumNum

// For the iswalk or path: could be int or
N NumNum NumNum NumNum | int | id

// this is for add vertex
N ADVrgument Num StringArgument
N AddVert addVertex

// this is for add edge
N AddEdge_AErgument AddEdge EdgeArgument
N EdgeArgument Num Num
N AddEdge addEdge

// this is for getVertex
N GetVertex getVertex

// for isVertex
N IsVertex isVertex

// for isVertex
N IsEdge isEdge

// isWalk_or_isPath
N IsWalk_or_isPath isWalk | isPath


// for isVertex
N NumNeighbours numNeighbours

// addvertex; addEdge; GetVertex; isEdge; Size; numNeighbours; isEdge;







Q






// These are my test cases


||| / n
(  id  + )
id + int ^ int * id +
id + int
( int )
( int ) + id
( int ) + id
( ( int ) + id )
( oppa gang gang style )
id = int + ( int + int ) * ( int / int )
id = int + int - int + int
id = int + int * int - int / int
id = string string string
id = id string id string id string string string
Stop
