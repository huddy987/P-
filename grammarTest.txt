// this is how we comment this file
// so the very first char of every line is N to tell the
//      the grammar maker that it's a Nonterminal being defined
// if the token starts with a capital letter, its a nonterminal
// if it starts with a lower case letter, its a terminal
// these has their own sets in the map with key: "terminal" & "nonTerminal"
// end the query with Q to mean Quit
// The test immediately follows the description of the grammar
// //////////////////////////////////////////////////////////////////////////////////////

N S0   number    | variable  | Open Expr_Close   | Factor PowOp_Primary  | Term MulOp_Factor | Expr AddOp_Term   | AddOp Term
N Expr    number    | variable  | Open Expr_Close   | Factor PowOp_Primary  | Term MulOp_Factor | Expr AddOp_Term   | AddOp Term
N Term     number    | variable  | Open Expr_Close   | Factor PowOp_Primary  | Term MulOp_Factor
N Factor   number    | variable  | Open Expr_Close   | Factor PowOp_Primary
N Primary  number    | variable  | Open Expr_Close
N AddOp    + | âˆ’
N MulOp    * | /
N PowOp    ^
N Open     (
N Close    )
N AddOp_Term   AddOp Term
N MulOp_Factor     MulOp Factor
N PowOp_Primary    PowOp Primary
N Expr_Close   Expr Close
Q
// These are my test cases

 
||| / n
( number + )
variable + number ^ number * variable +
variable + number
( number )
( number ) + variable
( number ) + variable
( ( number ) + variable )
( oppa gang gang style )
Stop