// ALLOWED: two non-terminals together or one terminal
// Current limitations: Identifiers are treated as their own type: they
// cannot be used in integer expressions or string expressions


// Start Grammar
N Start SFunction SArgument | IFunction IArgument | Identifier Assignment


// String function grammar
// ==================================================
//

// Print function grammar
N SFunction Print SFunctionArgument
N SFunctionArgument Delimiter SArgument
N Print print


//
// ==================================================
//


// Assignment grammar
N Assignment Equality SArgument | Equality IArgument | Equality Identifier


// General non-terminal grammar
// ==================================================
//

// String Argument
N SArgument SArgument SArgument | string

// Integer Argument
// Lets us mix and match math expressions and integers.
N IArgument MathArgument IArgument | IArgument IArgument | int

// This is all the fancy stuff for PEDMAS

N MathArgument     int | id  | Open Expr_Close   | Term MulOp_Factor     | Expr AddOp_Term   | AddOp Term
N Expr     int   | id  | Open Expr_Close     | Term MulOp_Factor     | Expr AddOp_Term   | AddOp Term
N Term     int   | id  | Open Expr_Close     | Term MulOp_Factor
N Factor   int   | id  | Open Expr_Close   
N Primary  int   | id  | Open Expr_Close
N AddOp    +     | -
N MulOp    *     | /
N Open     (
N Close    )
N AddOp_Term   AddOp Term
N MulOp_Factor     MulOp Factor
N Expr_Close   Expr Close

//
// ==================================================
//

// General terminal grammar
N Delimiter  :
N Identifier id
N Equality =
Q
